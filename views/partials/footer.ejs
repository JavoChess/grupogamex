
<!--     <footer class="my-3 pt-3 text-muted text-center text-small">
        <p class="mb-1">&copy; <%= new Date().getFullYear() %> grupogamex</p>
        <ul class="list-inline">
            <li class="list-inline-item"><a href="#">Privacy</a></li>
            <li class="list-inline-item"><a href="#">Terms</a></li>
            <li class="list-inline-item"><a href="#">Support</a></li>
        </ul>
    </footer> -->


    <!-- JavaScript JQuery -->
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script> -->

    <!-- JavaScript Boostrap 5 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>


    <!-- luxon (Tabulator) -->
    <script src="https://cdn.jsdelivr.net/npm/luxon/build/global/luxon.min.js"></script>		
    <!-- Tabulator -->
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.2.3/dist/js/tabulator.min.js"></script>

    <script type="text/javascript">
        
        /* ------------------------------------- */
        /* OTRAS FUNCIONES */
        /* ------------------------------------- */

        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
        
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            let forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) { 
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()

        /* Modal de pedidos */
        let exampleModal = document.getElementById('modal-productos-pedidos');
        exampleModal.addEventListener('show.bs.modal', (event) => {
            let button = event.relatedTarget
            let modalTitle = exampleModal.querySelector('.modal-title')
            let modalBodyInput = exampleModal.querySelector('.modal-body input')
            //modalTitle.textContent = 'Seleccionar productos' 
        });

        /* ------------------------------------- */
        /* TERMINA OTRAS FUNCIONES */
        /* ------------------------------------- */




        let tblUsuarios = <%- JSON.stringify(tabledata) %>; 
        let tblMateriales = <%- JSON.stringify(tabledata2) %>; 
        let tblProdPedidos = []; 
        let tblListaPedidos = <%- JSON.stringify(tabledata3) %>; 
        let tblProdAsociados = []; 
        let tblAlmacen = <%- JSON.stringify(tabledata4) %>; 
        let tblFacturacion = <%- JSON.stringify(tabledata5) %>; 
        
        let vistaUsuarios = <%- JSON.stringify(vistaUsuarios) %>; 
        let vistaMateriales = <%- JSON.stringify(vistaMateriales) %>; 
        let vistaCompras = <%- JSON.stringify(vistaCompras) %>; 


        //Generate print icon
        let iconoElimina = (cell, formatterParams) => { //plain text value
            return "<span class='material-icons md-dark md-inactive md-18'>remove</span>";
        };

        let iconoEdita = (cell, formatterParams) => { //plain text value
            return "<span class='material-icons md-dark md-inactive md-18'>edit</span>";
        };

        let iconoGuarda = (cell, formatterParams) => { //plain text value
            return "<span class='material-icons md-dark md-inactive md-18'>save</span>";
        };

        // ------------------------------
        // tabla usuarios
        // ------------------------------
        let tableUsuarios = new Tabulator("#tabla-usuarios", { 
            height: 380, // set height of table to enable virtual DOM
            data: tblUsuarios, //load initial data into table
            layout: "fitColumns", //fit columns to width of table (optional)
            pagination: "local",       //paginate the data
            paginationSize: 10,         //allow 7 rows per page of data
            paginationCounter: "rows", //display count of paginated rows in footer
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns

                {title:"Id",      field:"id_usuario", sorter:"string", hozAlign:"left"},
                {title:"Usuario", field:"cd_usuario", sorter:"string", hozAlign:"left", editor: true},
                {title:"Nombre",  field:"nb_usuario", sorter:"string", hozAlign:"left", editor: true},
                {title:"Área",    field:"nb_area",    sorter:"string", hozAlign:"left", editor: true},
                {title:"Tipo",    field:"tp_usuario", sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["Admin", "Compras", "Almacén"]}},
                {formatter: iconoElimina, width:40, hozAlign:"center", cellClick: function(e, cell) { 
                        const id = cell.getRow().getData().usuario_id;
                        let ejecutar = confirm("Se va a eliminar el registro: " + id);
                        if (ejecutar) {
                            $.post("/usuarios/eliminar/" + id, {}, function(res) { 
                                if(res === 'eliminado') { 
                                    alert("¡Se eliminó el registro!"); 
                                    location.reload(); 
                                } 
                            });
                        }
                    }
                },
                {formatter: iconoEdita, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                        const id = cell.getRow().getData().usuario_id;
                        const valores = cell.getRow().getData();
                        let ejecutar = confirm("Se va a editar el registro: " + id);
                        if (ejecutar) { 
                            $.post("/usuarios/editar/" + id, valores, function(res) {
                                if(res === 'editado') { 
                                    alert("¡Se editó el registro!");
                                    location.reload();
                                }
                            });
                        } 
                    
                    }
                },
                {formatter: iconoGuarda, width:40, hozAlign:"center", cellClick:function(e, cell) {
                            
                        const valores = cell.getRow().getData();
                        if (valores.usuario_id === 0) { 

                            delete valores.usuario_id;
                            Object.keys(valores).forEach(function(key, index) {
            
                                if (typeof valores[key] == 'undefined') {
                                    valores[key]="";
                                }
                            });
                            
                            let ejecutar = confirm("Se va a guardar el nuevo registro");
                            if (ejecutar) {
                                $.post("/usuarios/guardar/", valores, function(res) {
                                    if(res === 'Registro correcto') { 
                                        alert("¡Se guardó el registro!"); 
                                        location.reload();
                                    }
                                });
                            } 
                        }
                    }
                },
            ],
        });
        
        // ------------------------------
        // tabla materiales
        // ------------------------------

        let tableMateriales = new Tabulator("#tabla-materiales", { 
            height: 380,               // set height of table to enable virtual DOM
            data: tblMateriales,          //load initial data into table
            history: true,             //allow undo and redo actions on the table
            //selectable:true,           //make rows selectable 
            layout: "fitColumns", //fit columns to width of table (optional)
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            keybindings:{ 
                        "redo" : "ctrl + r", //bind redo function to ctrl + r 
                        }, 
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns 
                {title:"Id",              field:"material_id",    sorter:"string", hozAlign:"left"},
                {title:"Nombre",          field:"nombre",         sorter:"string", hozAlign:"left", editor: true}, 
                {title:"Código",          field:"codigo",         sorter:"string", hozAlign:"left", editor: true}, 
                {title:"Tipo producto",   field:"tipo_producto",  sorter:"string", hozAlign:"left", editor: true},
                {title:"Marca",           field:"marca",          sorter:"string", hozAlign:"left", editor: true},
                {title:"Cliente",         field:"cliente",        sorter:"string", hozAlign:"left", editor: true},
                {title:"Proveedor",       field:"proveedor",      sorter:"string", hozAlign:"left", editor: true},
                {title:"Almacén",         field:"almacen",        sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["1", "2"]}},
                {title:"Clasif. Almacén", field:"clasif_almacen", sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["A", "B", "C"]}},
                {title:"Estatus",         field:"estatus",        sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["Activo", "Inactivo"]}},
                {formatter: iconoElimina, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                            
                        const id = cell.getRow().getData().material_id; 
                        let ejecutar = confirm("Se va a eliminar el registro: " + id); 
 
                        if (ejecutar) { // https://codeforgeek.com/handle-get-post-request-express-4/
                            $.post("/materiales/eliminar/" + id, {}, function(data) {
                                if(data === 'eliminado') { 
                                    alert("¡Se eliminó el registro!");
                                    location.reload();
                                }
                            });
                        } 
                    }
                }, 
                {formatter: iconoEdita, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                        const id = cell.getRow().getData().material_id; 
                        const valores = cell.getRow().getData();
                        let ejecutar = confirm("Se va a editar el registro: " + id);
                        /* console.log(valores); */
                        if (ejecutar) {
                            $.post("/materiales/editar/" + id, valores, function(res) {
                                if(res === 'editado') { 
                                    alert("¡Se editó el registro!");
                                    location.reload();
                                }
                            });
                        } 
                    }
                },
                {formatter: iconoGuarda, width:40, hozAlign:"center", cellClick:function(e, cell) {
                            
                        const valores = cell.getRow().getData();
                        if (valores.material_id === 0) { 

                            delete valores.material_id;
                            Object.keys(valores).forEach(function(key, index) {
            
                                if (typeof valores[key] == 'undefined') {
                                    valores[key]="";
                                }
                            });
                            /*console.log(valores);*/
                            
                            let ejecutar = confirm("Se va a guardar el nuevo registro ");
                            if (ejecutar) {
                                $.post("/materiales/guardar/", valores, function(res) {
                                    if(res === 'Registro correcto') { 
                                        alert("¡Se guardó el registro!"); 
                                        location.reload();
                                    }
                                });
                            } 
                        }
                    }
                },
            ],
        }); 
        


        // ------------------------------------------------------------------------------
        // tabla de los productos pedidos (Compras - Pedidos nuevos) - Vista Nuevo Pedido
        // ------------------------------------------------------------------------------

        let tableProductosPedidos = new Tabulator("#tabla-productos-pedidos", { 
            height: 280,               // set height of table to enable virtual DOM
            data: tblProdPedidos,          //load initial data into table
            history: true,             //allow undo and redo actions on the table
            //selectable:true,           //make rows selectable 
            layout: "fitColumns", //fit columns to width of table (optional)
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            keybindings:{ 
                        "redo" : "ctrl + r", //bind redo function to ctrl + r 
                        }, 
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns 
                {title:"Id de producto",     field:"id_producto",       sorter:"string", hozAlign:"left" },
                {title:"Nombre de producto", field:"nb_producto",       sorter:"string", hozAlign:"left" }, 
                {title:"Cantidad",           field:"nu_cantidad",       sorter:"string", hozAlign:"left" }, 
                {title:"Artículo",           field:"cd_articulo",       sorter:"string", hozAlign:"left" },
                {title:"Precio unitario",    field:"im_unidad",         sorter:"string", hozAlign:"left" },
                {title:"Importe del pedido", field:"im_pedido",         sorter:"string", hozAlign:"left" },
                {title:"Fecha de entrega",   field:"fh_entrega",        sorter:"date",   hozAlign:"left" },
                {title:"Moneda",             field:"cd_moneda",         sorter:"string", hozAlign:"left" },
                {title:"Tipo de cambio",     field:"im_tipo_de_cambio", sorter:"string", hozAlign:"left" },
                
            ],
        }); 


        // -----------------------------------------------------
        // tabla con la lista de los pedidos (Lista de Pedidos )
        // -----------------------------------------------------

        let tableListaPedidos = new Tabulator("#tabla-lista-pedidos", { 
            height: 280,               // set height of table to enable virtual DOM
            data: tblListaPedidos,          //load initial data into table
            pagination: "local",       //paginate the data 
            layout: "fitColumns", //fit columns to width of table (optional)
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            selectable: 1,
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns 
                {title:"Id de pedido",     field:"id_pedido",           sorter:"string", hozAlign:"left" },
                {title:"Id usuario",       field:"id_usuario",          sorter:"string", hozAlign:"left" }, 
                {title:"Orden de compra",  field:"nu_orden_compra",     sorter:"string", hozAlign:"left" }, 
                {title:"Estatus",          field:"nb_estatus",          sorter:"string", hozAlign:"left" }, 
                {title:"Proveedor",        field:"nb_proveedor",        sorter:"string", hozAlign:"left" },
                {title:"Fecha de pedido",  field:"fh_pedido",           sorter:"date",   hozAlign:"left" },
                {title:"Términos",         field:"tx_terminos",         sorter:"string", hozAlign:"left" },
                {title:"Entregar en",      field:"tx_entregar_en",      sorter:"string", hozAlign:"left" },
                {title:"Horario",          field:"nu_horario",          sorter: "string",hozAlign:"left" },
                {title:"Contacto",         field:"nb_contacto",         sorter:"string", hozAlign:"left" },
                {title:"Especificaciones", field:"tx_especificaciones", sorter:"string", hozAlign:"left" },
                {title:"Comentarios",      field:"tx_comentarios_estatus", sorter:"string", hozAlign:"left" },
                
            ],
        }); 

        // ----------------------------------------------------------------------
        // tabla con la lista de los productos pedidos - Vista Lista de Pedidos 
        // ----------------------------------------------------------------------

        let tableListaProdPedidos = new Tabulator("#tabla-lista-prodpedidos", { 
            height: 280,               // set height of table to enable virtual DOM
            data: tblProdAsociados,          //load initial data into table
            pagination: "local",       //paginate the data 
            layout: "fitColumns", //fit columns to width of table (optional)
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            selectable: 1,
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns 
                {title:"Id",                    field:"id_prodpedido",    sorter:"string", hozAlign:"left" },
                {title:"Id de Pedido",          field:"id_pedido",         sorter:"string", hozAlign:"left" }, 
                {title:"Id de producto",        field:"id_producto",       sorter:"string", hozAlign:"left" }, 
                {title:"Producto",              field:"nb_producto",       sorter:"string", hozAlign:"left" }, 
                {title:"Cantidad",              field:"nu_cantidad",       sorter:"string", hozAlign:"left" },
                {title:"Código de artículo",    field:"cd_articulo",       sorter:"date",   hozAlign:"left" },
                {title:"Precio unitario",       field:"im_unidad",         sorter:"string", hozAlign:"left" },
                {title:"Importe del Pedido",    field:"im_pedido",         sorter:"string", hozAlign:"left" },
                {title:"Fecha est. de entrega", field:"fh_entrega",        sorter:"date",   hozAlign:"left" },
                {title:"Moneda",                field:"cd_moneda",         sorter:"string", hozAlign:"left" },
                {title:"Tipo de cambio",        field:"im_tipo_de_cambio", sorter:"string", hozAlign:"left" },
                
            ],
        }); 



        // ----------------------------------
        // tabla con la lista para el Almacén
        // ----------------------------------
        let tableListaProdPedidosAlmacen = new Tabulator("#tabla-lista-almacen", { 
            height: 280,               // set height of table to enable virtual DOM 
            data: tblAlmacen,          //load initial data into table 
            layout: "fitColumns", //fit columns to width of table (optional)6
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            selectable: 1, 
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns 
                {title:"Id prod pedido",     field:"id_prodpedido", sorter:"string",  hozAlign:"left" },
                {title:"Orden de compra",    field:"nu_orden_compra", sorter:"string", hozAlign:"left" },
                {title:"Id de Pedido",       field:"id_pedido",       sorter:"string", hozAlign:"left" }, 
                {title:"Proveedor",          field:"nb_proveedor",    sorter:"string", hozAlign:"left", tooltip:true }, 
                {title:"Estatus",            field:"nb_estatus",      sorter:"string", hozAlign:"left" }, 
                {title:"Id de producto",     field:"id_producto",     sorter:"string", hozAlign:"left" },
                {title:"Producto a recibir", field:"nb_producto",     sorter:"string",   hozAlign:"left", tooltip:true },
                {title:"Cantidad",           field:"nu_cantidad",     sorter:"string", hozAlign:"left" },
                {title:"Código de artículo", field:"cd_articulo",     sorter:"string", hozAlign:"left" },
                {title:"Estatus recepción", field:"nb_prodpedido_estatus",     sorter:"string", hozAlign:"left" },
                
            ],
        }); 


        // ----------------------------------
        // tabla con la lista para facturacion
        // ----------------------------------
        let tableFacturacion = new Tabulator("#tbl-list-almacen-fact", { 
            height: 280,               // set height of table to enable virtual DOM 
            data: tblFacturacion,          //load initial data into table 
            layout: "fitColumns", //fit columns to width of table (optional)6
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            selectable: 1, 
            columnDefaults:{ headerTooltip:true,},
            columns: [ //Define Table Columns 
                {title:"Id de recepcion",  field:"id_recepcion",     sorter:"string", hozAlign:"left", tooltip:true  },
                {title:"Id de Pedido",     field:"id_pedido",        sorter:"string", hozAlign:"left", tooltip:true  }, 
                {title:"Fecha recepción",  field:"recepcion_created_at",     sorter:"date",   hozAlign:"left", tooltip:true  }, 
                {title:"Vehículo",         field:"tx_vehiculo",      sorter:"string", hozAlign:"left", tooltip:true  }, 
                {title:"Chofer",           field:"nb_chofer",        sorter:"string", hozAlign:"left", tooltip:true  },
                {title:"Piezas recibidas", field:"nu_pzs_recibidas", sorter:"date",   hozAlign:"left", tooltip:true  },
                
            ],
        }); 

        
        

        $("#pedidos-nuevo-producto").click(function() { 
            // Tendrias que generar el nuevo Id en la DB, y cuardarlo en nuevoId 
            const nuevoId = 0;
            tableProductosPedidos.addRow( {id_producto: nuevoId }, true);
        }); 



        // ------------------------------
        // General FE script
        // ------------------------------

        const MENSAJE_FALTAN = 'Uno o más campos requeridos faltan de completar.';

        /* Valida si el form está completo */ 
        const validaFormulario = (frm) => { 
            let res;
            $('#' + frm)[0].checkValidity() ? res=true : res=false;
            return res;
        } 

        /* Funcion para Llenar un select con los datos de un array */ 
        const llenaSelect = (selectId, optionsArray) => {
            $(`#${selectId}`).empty();
            optionsArray.forEach(option => {
                $(`<option>${option}</option>`).appendTo(`#${selectId}`);
            });
        }

        

        /* Limpia los objetos de un form */ 
        const limpiaObjetosEnForm = (frm) => {
            $("#" + frm).find(":input").each(function () {  // 'function' is needed here 
                $(this).val("");
            });
        }

        /* Construye un objeto con los inputs de un form */ 
        const arrayObjetosEnForm = (frm) => {
            
            let valores = {};
            $("#" + frm).find(":input").each(function () {  /* 'function' is needed here */
                valores[this.name] = $(this).val();
            });
            return valores;
            /*Source: https://stackoverflow.com/questions/5603117/jquery-create-object-from-form-fields */
        }
        
        /* En caso de que arrayObjetosEnForm no funcione */
        const getFormData = (form) => {
            let formData = {};
            for (let i = 0; i < form.elements.length; i++) {
                let element = form.elements[i];
                if (element.name) {
                    formData[element.name] = element.value;
                }
            }
            return formData;
        }


        const autocompleteInput = (inputId, array) => {
            const suggestions = document.getElementById("suggestions");
            suggestions.innerHTML='';

            array.forEach(function(item) {
                const option = document.createElement("option");
                option.value = item;
                suggestions.appendChild(option);
            });
            document.getElementById(inputId).setAttribute("list", "suggestions");
        }

        /* Recorre el form form-nuevo-pedido y crea el array de datos luego manda el post para agregar el nuevo registro*/
        const enviaNuevoPedido = () => {
            
            let valores = arrayObjetosEnForm("form-nuevo-pedido");
            delete valores.id_pedido;
            valores.id_usuario = 1;
            $.post("/pedidos/guardar/", valores, (res) => { 
                if( res > 0 ) { 
                    //console.log("¡Se guardó el registro! Con el id: " + res); 
                    let tblProdPedidosRows = {}; 
                    const rows = tableProductosPedidos.getRows(); 
                    const rowCount = tableProductosPedidos.getDataCount(); 
                    for (let i = 0; i<rowCount; i++) { 
                        tblProdPedidosRows[i] = rows[i]._row.data;
                        tblProdPedidosRows[i].id_pedido = parseInt(res);
                    }
                    /* agrega el número de productos agregados */
                    tblProdPedidosRows['totalRows'] = rowCount;
                    /* aquí hacemos el post con los rows de la tabla de productos pedidos */
                    $.post("/pedidos/prodpedidos/", tblProdPedidosRows, (res2) => {
                        if (res2 === 'ok') {  /* definir bien la respuesta */
                            alert("Pedido y productos registrados con éxito");
                            location.reload();
                        }
                    }); 
                } 
            }); 
        }

        /* resetea un form y le quita was-validated */
        const reseteaForm = (frm) => {
            const el = document.getElementById(frm);
            el.reset();
            el.classList.remove('was-validated');
        }

        /* Agrega un nuevo pedido (si esta completo el form) */ 
        $( "#form-nuevo-pedido" ).submit( (event) => { 
            const frm = "form-nuevo-pedido";
            validaFormulario(frm) ? enviaNuevoPedido() : alert(MENSAJE_FALTAN);
            event.preventDefault();
        });

        /* Cuando se da clic en el btn hace la consulta y con el array res llena el select del modal (res es un array) */
        $("#btn-modal-agregar-productos").click(() => { 

            limpiaObjetosEnForm('frm-modal-productos-pedidos');
            $.get("/compras/listaprod", (res) => { 
                // el res es de la forma {{ id_producto: x1, nb_producto: a1}...{ id_producto: xn, nb_producto: a}}               
                let arr_productos=[];
                res.forEach((item, index) => { 
                    arr_productos.push(item.nb_producto + '--' + item.id_producto);
                });
                autocompleteInput("modal-ppedidos-1", arr_productos);
            });
        });


        /* Modal - Pedidos - Calcula el Importe del pedido cuando el tipo de cambio pierde el foco */
        $("#modal-ppedidos-8").focusout( () => {
            const cantidad = parseFloat($("#modal-ppedidos-2").val());
            const precioUnitario = parseFloat($("#modal-ppedidos-3").val());
            const tipoDeCambio = parseFloat($("#modal-ppedidos-8").val());
            const importe = cantidad * precioUnitario * tipoDeCambio; 
            const importeRedondeado = Math.round(importe * 100) / 100;
            $("#modal-ppedidos-4").val( importeRedondeado ) ;
        });

        /* Recorre el form frm-modal-productos-pedidos y crea el array de datos luego manda el post para agregar el nuevo producto */
        /* Modal - Pedidos - Agrega un nuevo producto */ 
        const agregaNuevoProductoEnTabla = () => {
            
            const valores = arrayObjetosEnForm("frm-modal-productos-pedidos");
            const idConProd = valores.nb_producto;
            // los dos guiones apoyan para identificar el id al final del string
            const pos = idConProd.indexOf('--');
            const largo = idConProd.length;

            valores.id_producto = idConProd.substring(pos+2, largo);
            valores.nb_producto = idConProd.substring(0, pos);

            tableProductosPedidos.addRow( valores, true);
            reseteaForm("frm-modal-productos-pedidos");
            $("#modal-ppedidos-cancelar").click();

        }

        /* Modal - Pedidos - Agrega un nuevo producto */ 
        $( "#frm-modal-productos-pedidos" ).submit( ( event ) => { 
            const frm = "frm-modal-productos-pedidos";
            validaFormulario(frm) ? agregaNuevoProductoEnTabla() : alert(MENSAJE_FALTAN);
            event.preventDefault();
        });


        /* ------------------------ */
        /* VISTA - LISTA DE PEDIDOS */
        /* ------------------------ */


        // Obtiene el Id del registro seleccionado
        tableListaPedidos.on("rowSelected", (row) => { 

            const idPedidoSeleccionado = row._row.data.id_pedido;
            let valores = {};
            valores['id_pedido'] = idPedidoSeleccionado;
            $("#id_pedido_seleccionado").html("Id seleccionado: " + idPedidoSeleccionado); 
            //tableListaPedidos.deselectRow(row);

            // actualiza el segundo grid con la query
            $.post("/listapedidosfiltradaproductos", valores, (res) => {
                tableListaProdPedidos.replaceData(res);
            });

        });

        // Cuando cambia el select del form (Lista de Pedidos)
        $("#lista_pedidos_combo").change(() => { 
            let valores = {};
            const nb_estatus = $( "#lista_pedidos_combo option:selected" ).text();
            valores['nb_estatus'] = nb_estatus;
            $("#id_pedido_seleccionado").html("Id seleccionado: "); 

            /* Dependiendo de la seleccion se activan o desactivan los botones */
            if (nb_estatus === 'Autorizado') {
                
                $('#btn-autorizar-pedido').attr("disabled", true);
                $('#btn-cancelar-pedido').attr('disabled', false);
                
            } else if (nb_estatus === 'Cancelado') {
                
                $('#btn-autorizar-pedido').attr("disabled", false);
                $('#btn-cancelar-pedido').attr('disabled', true);
            } else { // Pendiente:
                
                $('#btn-autorizar-pedido').attr("disabled", false);
                $('#btn-cancelar-pedido').attr('disabled', false);
            }

            $.post("/listapedidosfiltrada", valores, (res) => {
                tableListaPedidos.replaceData(res);
            });



        });

        
        // btn autorizar pedido
        $('#btn-autorizar-pedido').click(function() {
            const cadena = $('#id_pedido_seleccionado').html();
            const id_pedido = cadena.substring(17, cadena.length);

            if (id_pedido) {
                
                const id_usr_cambia_estatus = $('#nav-id-usuario').html();
                const tx_comentarios_estatus = prompt("¿Tienes comentarios sobre esta acción?");
                const valores = { 
                    id_pedido: id_pedido, 
                    nb_estatus: 'Autorizado',
                    id_usr_cambia_estatus: id_usr_cambia_estatus,
                    tx_comentarios_estatus: tx_comentarios_estatus
                }
                //console.log(valores);

                // aqui va el post
                $.post("/actualizapedido", valores, function(res) {
                    if(res === 'Autorizado') { 
                        alert("¡Pedido autorizado!"); 
                        $("#lista_pedidos_combo").change();
                        tableListaProdPedidos.replaceData([]);
                    }
                }); 

            } else {
                alert("Ningún registro seleccionado");
            }

        });
        
        // btn cancelar pedido
        $("#btn-cancelar-pedido").click(() => {
            const cadena = $("#id_pedido_seleccionado").html();
            const id_pedido = cadena.substring(17, cadena.length);

            if (id_pedido) { 
                const id_usr_cambia_estatus = $('#nav-id-usuario').html();
                const tx_comentarios_estatus = prompt("¿Tienes comentarios sobre esta acción?");

                const valores = { 
                    'id_pedido': id_pedido, 
                    'nb_estatus': 'Cancelado',
                    'id_usr_cambia_estatus': id_usr_cambia_estatus,
                    'tx_comentarios_estatus': tx_comentarios_estatus
                }

                // aqui va el post
                $.post("/actualizapedido", valores, function(res) {
                    if(res === 'Cancelado') { 
                        alert("¡Pedido cancelado!"); 
                        $("#lista_pedidos_combo").change();
                        tableListaProdPedidos.replaceData([]);
                    }
                });
            } else {
                alert("Ningún registro seleccionado");
            }

        });

        /* -------------------------------- */
        /* TERMINA VISTA - LISTA DE PEDIDOS */
        /* -------------------------------- */




        /* ------------------------ */
        /* VISTA - LISTA DE ALMACEN */
        /* ------------------------ */

        // Obtiene el Id del registro seleccionado
        tableListaProdPedidosAlmacen.on("rowSelected", function(row) { 
            const id_prodpedido = row._row.data.id_prodpedido;
            const id_pedido = row._row.data.id_pedido;
            $("#alm-id-pedido-sel").html("Id Pedido: " + id_pedido); 
            $("#alm-id-prodpedido-sel").html("Id Prod. pedido: " + id_prodpedido); 

        });


        /* Agrega un registro a almacen */
        const nuevaRecepcion = () => { 
            const valores = arrayObjetosEnForm("frm-recepcion");
            valores["id_usuario"] = parseInt($('#nav-id-usuario').html());
            
            const strIdPedido = $("#alm-id-pedido-sel").html();
            const id_pedido = strIdPedido.substring(11, strIdPedido.length);

            const strIdProdPedido = $("#alm-id-prodpedido-sel").html();
            const id_prodpedido = strIdProdPedido.substring(16, strIdProdPedido.length);

            valores["id_pedido"] = parseInt(id_pedido);
            valores["id_prodpedido"] = parseInt(id_prodpedido);



            /* 1. Agrega un registro en la tabla almacen 
               2. cambia estatus a 'Recibido' en prodpedidos 
               3. Actualiza la tabla con nuevo query */
            
            /* 1. */
            $.post("/registraRecepcion", valores, (res) => { 
                
                if (parseInt(res) > 0) {
                    alert("Insert correcto en tbl almacen. Ahora update en tbl prodpedidos");
                    /* 2. */ 
                    $.post("/editaProdPedido", {'id_prodpedido': id_prodpedido}, (res2) => { 
                        if (res2 === 'ok') { 
                            alert("Editado correctamente en tbl prodpedidos"); 
                            /* 3. */ 
                            $.get("/prodPedidosRequery", (res) => {
                                tableListaProdPedidosAlmacen.replaceData(res);
                                let element = document.getElementById("frm-recepcion"); 
                                element.reset(); 
                                element.classList.remove('was-validated'); 
                            }); 
                        } else {
                            alert("Error al actualizar en tbl prodpedidos");
                        }
                    });
                } else { 
                    alert("Error al insertar en tbl almacen");
                }
            });

            
        }

        /* Validacion del form recepcion de materiales */ 
        $( "#frm-recepcion" ).submit(function( event ) { 
            const frm = "frm-recepcion";
            validaFormulario(frm) ? nuevaRecepcion() : alert(MENSAJE_FALTAN);
            event.preventDefault(); 
        }); 




        /* -------------------------------- */
        /* TERMINA VISTA - LISTA DE ALMACEN */
        /* -------------------------------- */


        




    </script>

    

    <!-- para el boton responsive del nav-var -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js" integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE" crossorigin="anonymous"></script>



    
</body>
</html>
