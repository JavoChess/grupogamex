
<!--     <footer class="my-3 pt-3 text-muted text-center text-small">
        <p class="mb-1">&copy; <%= new Date().getFullYear() %> grupogamex</p>
        <ul class="list-inline">
            <li class="list-inline-item"><a href="#">Privacy</a></li>
            <li class="list-inline-item"><a href="#">Terms</a></li>
            <li class="list-inline-item"><a href="#">Support</a></li>
        </ul>
    </footer> -->


    <!-- JavaScript JQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- JavaScript Boostrap 5 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>


    <!-- luxon (Tabulator) -->
    <script src="https://cdn.jsdelivr.net/npm/luxon/build/global/luxon.min.js"></script>		
    <!-- Tabulator -->
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.2.3/dist/js/tabulator.min.js"></script>

    <script type="text/javascript">
        
        /* ------------------------------------- */
        /* OTRAS FUNCIONES */
        /* ------------------------------------- */

        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
        'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
                })
        })()

        /* Modal de pedidos */
        var exampleModal = document.getElementById('modal-productos-pedidos');
        exampleModal.addEventListener('show.bs.modal', function (event) {
            // Button that triggered the modal
            var button = event.relatedTarget
            // Extract info from data-bs-* attributes
            //var recipient = button.getAttribute('data-bs-whatever')
            // If necessary, you could initiate an AJAX request here
            // and then do the updating in a callback.
            //
            // Update the modal's content.
            var modalTitle = exampleModal.querySelector('.modal-title')
            var modalBodyInput = exampleModal.querySelector('.modal-body input')

            //modalTitle.textContent = 'Seleccionar productos' 
            //modalBodyInput.value = recipient
        });


        /* Funciones del autocomplete */


            function autocomplete(inp, arr) {
                /*the autocomplete function takes two arguments,
                the text field element and an array of possible autocompleted values:*/
                var currentFocus;
                /*execute a function when someone writes in the text field:*/
                inp.addEventListener("input", function(e) {
                    var a, b, i, val = this.value;
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) { return false;}
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        /*check if the item starts with the same letters as the text field value:*/
                        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                            /*create a DIV element for each matching element:*/
                            b = document.createElement("DIV");
                            /*make the matching letters bold:*/
                            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click", function(e) {
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocompleted values,
                                (or any other open lists of autocompleted values:*/
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    }
                });
                /*execute a function presses a key on the keyboard:*/
                inp.addEventListener("keydown", function(e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) {
                        /*If the arrow DOWN key is pressed,
                        increase the currentFocus variable:*/
                        currentFocus++;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 38) { //up
                        /*If the arrow UP key is pressed,
                        decrease the currentFocus variable:*/
                        currentFocus--;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 13) {
                        /*If the ENTER key is pressed, prevent the form from being submitted,*/
                        e.preventDefault();
                        if (currentFocus > -1) {
                            /*and simulate a click on the "active" item:*/
                            if (x) x[currentFocus].click();
                        }
                    }
                });
                function addActive(x) {
                    /*a function to classify an item as "active":*/
                    if (!x) return false;
                    /*start by removing the "active" class on all items:*/
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = (x.length - 1);
                    /*add class "autocomplete-active":*/
                    x[currentFocus].classList.add("autocomplete-active");
                }
                function removeActive(x) {
                    /*a function to remove the "active" class from all autocomplete items:*/
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }
                function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document, except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }
                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }

            /* AquÃ­ va el id del input ppedidos */
            //autocomplete(document.getElementById("modal-ppedidos-1"), arr_productos);

        /* Termina Funciones del autocomplete */

        /* ------------------------------------- */
        /* TERMINA OTRAS FUNCIONES */
        /* ------------------------------------- */




        let tabledataUsuarios = <%- JSON.stringify(tabledata) %>; 
        let tabledataMateriales = <%- JSON.stringify(tabledata2) %>; 
        let tabledataProductosPedidos = []; 
        let tabledataListaPedidos = <%- JSON.stringify(tabledata3) %>; 
        let tabledataListaProdPedidos = []; 

        let vistaUsuarios = <%- JSON.stringify(vistaUsuarios) %>; 
        let vistaMateriales = <%- JSON.stringify(vistaMateriales) %>; 
        let vistaCompras = <%- JSON.stringify(vistaCompras) %>; 


        //Generate print icon
        let iconoElimina = function(cell, formatterParams) { //plain text value
            return "<span class='material-icons md-dark md-inactive md-18'>remove</span>";
        };

        let iconoEdita = function(cell, formatterParams) { //plain text value
            return "<span class='material-icons md-dark md-inactive md-18'>edit</span>";
        };

        let iconoGuarda = function(cell, formatterParams) { //plain text value
            return "<span class='material-icons md-dark md-inactive md-18'>save</span>";
        };

        // ------------------------------
        // tabla usuarios
        // ------------------------------
        let tableUsuarios = new Tabulator("#tabla-usuarios", { 
            height: 380, // set height of table to enable virtual DOM
            data: tabledataUsuarios, //load initial data into table
            layout: "fitColumns", //fit columns to width of table (optional)
            pagination: "local",       //paginate the data
            paginationSize: 10,         //allow 7 rows per page of data
            paginationCounter: "rows", //display count of paginated rows in footer
            columns: [ //Define Table Columns

                {title:"Id",      field:"id_usuario", sorter:"string", hozAlign:"left"},
                {title:"Usuario", field:"cd_usuario", sorter:"string", hozAlign:"left", editor: true},
                {title:"Nombre",  field:"nb_usuario", sorter:"string", hozAlign:"left", editor: true},
                {title:"Ãrea",    field:"nb_area",    sorter:"string", hozAlign:"left", editor: true},
                {title:"Tipo",    field:"tp_usuario", sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["Admin", "Compras", "AlmacÃ©n"]}},
                {formatter: iconoElimina, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                        const id = cell.getRow().getData().usuario_id;
                        let ejecutar = confirm("Se va a eliminar el registro: " + id);
                        if (ejecutar) {
                            $.post("/usuarios/eliminar/" + id, {}, function(res) { 
                                if(res === 'eliminado') { 
                                    alert("Â¡Se eliminÃ³ el registro!"); 
                                    location.reload(); 
                                } 
                            });
                        }
                    }
                },
                {formatter: iconoEdita, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                        const id = cell.getRow().getData().usuario_id;
                        const valores = cell.getRow().getData();
                        let ejecutar = confirm("Se va a editar el registro: " + id);
                        if (ejecutar) { 
                            $.post("/usuarios/editar/" + id, valores, function(res) {
                                if(res === 'editado') { 
                                    alert("Â¡Se editÃ³ el registro!");
                                    location.reload();
                                }
                            });
                        } 
                    
                    }
                },
                {formatter: iconoGuarda, width:40, hozAlign:"center", cellClick:function(e, cell) {
                            
                        const valores = cell.getRow().getData();
                        if (valores.usuario_id === 0) { 

                            delete valores.usuario_id;
                            Object.keys(valores).forEach(function(key, index) {
            
                                if (typeof valores[key] == 'undefined') {
                                    valores[key]="";
                                }
                            });
                            
                            let ejecutar = confirm("Se va a guardar el nuevo registro");
                            if (ejecutar) {
                                $.post("/usuarios/guardar/", valores, function(res) {
                                    if(res === 'Registro correcto') { 
                                        alert("Â¡Se guardÃ³ el registro!"); 
                                        location.reload();
                                    }
                                });
                            } 
                        }
                    }
                },
            ],
        });
        
        // ------------------------------
        // tabla materiales
        // ------------------------------

        let tableMateriales = new Tabulator("#tabla-materiales", { 
            height: 380,               // set height of table to enable virtual DOM
            data: tabledataMateriales,          //load initial data into table
            history: true,             //allow undo and redo actions on the table
            //selectable:true,           //make rows selectable 
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            keybindings:{ 
                        "redo" : "ctrl + r", //bind redo function to ctrl + r 
                        }, 
            columns: [ //Define Table Columns 
                {title:"Id",              field:"material_id",    sorter:"string", hozAlign:"left"},
                {title:"Nombre",          field:"nombre",         sorter:"string", hozAlign:"left", editor: true}, 
                {title:"CÃ³digo",          field:"codigo",         sorter:"string", hozAlign:"left", editor: true}, 
                {title:"Tipo producto",   field:"tipo_producto",  sorter:"string", hozAlign:"left", editor: true},
                {title:"Marca",           field:"marca",          sorter:"string", hozAlign:"left", editor: true},
                {title:"Cliente",         field:"cliente",        sorter:"string", hozAlign:"left", editor: true},
                {title:"Proveedor",       field:"proveedor",      sorter:"string", hozAlign:"left", editor: true},
                {title:"AlmacÃ©n",         field:"almacen",        sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["1", "2"]}},
                {title:"Clasif. AlmacÃ©n", field:"clasif_almacen", sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["A", "B", "C"]}},
                {title:"Estatus",         field:"estatus",        sorter:"string", hozAlign:"left", editor: true, editor:"list", editorParams:{values:["Activo", "Inactivo"]}},
                {formatter: iconoElimina, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                            
                        const id = cell.getRow().getData().material_id; 
                        let ejecutar = confirm("Se va a eliminar el registro: " + id); 
 
                        if (ejecutar) { // https://codeforgeek.com/handle-get-post-request-express-4/
                            $.post("/materiales/eliminar/" + id, {}, function(data) {
                                if(data === 'eliminado') { 
                                    alert("Â¡Se eliminÃ³ el registro!");
                                    location.reload();
                                }
                            });
                        } 
                    }
                }, 
                {formatter: iconoEdita, width:40, hozAlign:"center", cellClick:function(e, cell) { 
                        const id = cell.getRow().getData().material_id; 
                        const valores = cell.getRow().getData();
                        let ejecutar = confirm("Se va a editar el registro: " + id);
                        /* console.log(valores); */
                        if (ejecutar) {
                            $.post("/materiales/editar/" + id, valores, function(res) {
                                if(res === 'editado') { 
                                    alert("Â¡Se editÃ³ el registro!");
                                    location.reload();
                                }
                            });
                        } 
                    }
                },
                {formatter: iconoGuarda, width:40, hozAlign:"center", cellClick:function(e, cell) {
                            
                        const valores = cell.getRow().getData();
                        if (valores.material_id === 0) { 

                            delete valores.material_id;
                            Object.keys(valores).forEach(function(key, index) {
            
                                if (typeof valores[key] == 'undefined') {
                                    valores[key]="";
                                }
                            });
                            /*console.log(valores);*/
                            
                            let ejecutar = confirm("Se va a guardar el nuevo registro ");
                            if (ejecutar) {
                                $.post("/materiales/guardar/", valores, function(res) {
                                    if(res === 'Registro correcto') { 
                                        alert("Â¡Se guardÃ³ el registro!"); 
                                        location.reload();
                                    }
                                });
                            } 
                        }
                    }
                },
            ],
        }); 
        


        // ------------------------------
        // tabla de los productos pedidos (Compras - Pedidos nuevos)
        // ------------------------------

        let tableProductosPedidos = new Tabulator("#tabla-productos-pedidos", { 
            height: 280,               // set height of table to enable virtual DOM
            data: tabledataProductosPedidos,          //load initial data into table
            history: true,             //allow undo and redo actions on the table
            //selectable:true,           //make rows selectable 
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            keybindings:{ 
                        "redo" : "ctrl + r", //bind redo function to ctrl + r 
                        }, 
            columns: [ //Define Table Columns 
                {title:"Id de producto",     field:"id_producto",       sorter:"string", hozAlign:"left" },
                {title:"Nombre de producto", field:"nb_producto",       sorter:"string", hozAlign:"left" }, 
                {title:"Cantidad",           field:"nu_cantidad",       sorter:"string", hozAlign:"left" }, 
                {title:"ArtÃ­culo",           field:"cd_articulo",       sorter:"string", hozAlign:"left" },
                {title:"Precio unitario",    field:"im_unidad",         sorter:"string", hozAlign:"left" },
                {title:"Importe del pedido", field:"im_pedido",         sorter:"string", hozAlign:"left" },
                {title:"Fecha de entrega",   field:"fh_entrega",        sorter:"date",   hozAlign:"left" },
                {title:"Moneda",             field:"cd_moneda",         sorter:"string", hozAlign:"left" },
                {title:"Tipo de cambio",     field:"im_tipo_de_cambio", sorter:"string", hozAlign:"left" },
                
            ],
        }); 


        // ------------------------------
        // tabla con la lista de los pedidos (Lista de Pedidos )
        // ------------------------------

        let tableListaPedidos = new Tabulator("#tabla-lista-pedidos", { 
            height: 280,               // set height of table to enable virtual DOM
            data: tabledataListaPedidos,          //load initial data into table
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            selectable: 1,
            columns: [ //Define Table Columns 
                {title:"Id de pedido",     field:"id_pedido",           sorter:"string", hozAlign:"left" },
                {title:"Id usuario",       field:"id_usuario",          sorter:"string", hozAlign:"left"}, 
                {title:"Orden de compra",  field:"nu_orden_compra",     sorter:"string", hozAlign:"left" }, 
                {title:"Estatus",          field:"nb_estatus",          sorter:"string", hozAlign:"left" }, 
                {title:"Proveedor",        field:"nb_proveedor",        sorter:"string", hozAlign:"left" },
                {title:"Fecha de pedido",  field:"fh_pedido",           sorter:"date",   hozAlign:"left" },
                {title:"TÃ©rminos",         field:"tx_terminos",         sorter:"string", hozAlign:"left" },
                {title:"Entregar en",      field:"tx_entregar_en",      sorter:"string", hozAlign:"left" },
                {title:"Horario",          field:"nu_horario",          sorter: "string",hozAlign:"left"},
                {title:"Contacto",         field:"nb_contacto",         sorter:"string", hozAlign:"left"},
                {title:"Especificaciones", field:"tx_especificaciones", sorter:"string", hozAlign:"left"},
                
            ],
        }); 

        // ------------------------------
        // tabla con la lista de los productos pedidos (asociado con la Lista de Pedidos )
        // ------------------------------

        let tableListaProdPedidos = new Tabulator("#tabla-lista-prodpedidos", { 
            height: 280,               // set height of table to enable virtual DOM
            data: tabledataListaProdPedidos,          //load initial data into table
            pagination: "local",       //paginate the data 
            paginationSize: 10,        //allow 7 rows per page of data 
            paginationCounter: "rows", //display count of paginated rows in footer 
            selectable: 1,
            columns: [ //Define Table Columns 
                {title:"Id de pedido",     field:"id_pedido",           sorter:"string", hozAlign:"left" },
                {title:"Id usuario",       field:"id_usuario",          sorter:"string", hozAlign:"left" }, 
                {title:"Orden de compra",  field:"nu_orden_compra",     sorter:"string", hozAlign:"left" }, 
                {title:"Estatus",          field:"nb_estatus",          sorter:"string", hozAlign:"left" }, 
                {title:"Proveedor",        field:"nb_proveedor",        sorter:"string", hozAlign:"left" },
                {title:"Fecha de pedido",  field:"fh_pedido",           sorter:"date",   hozAlign:"left" },
                {title:"TÃ©rminos",         field:"tx_terminos",         sorter:"string", hozAlign:"left" },
                {title:"Entregar en",      field:"tx_entregar_en",      sorter:"string", hozAlign:"left" },
                {title:"Horario",          field:"nu_horario",          sorter:"string", hozAlign:"left" },
                {title:"Contacto",         field:"nb_contacto",         sorter:"string", hozAlign:"left" },
                {title:"Especificaciones", field:"tx_especificaciones", sorter:"string", hozAlign:"left" },
                
            ],
        }); 



        // SELECCION DE UN ELELEMTO
        // Guarda el Id del registro seleccionado
/*         let table2ItemSeleccionado=0;

        table2.on("rowSelected", function(row) { 
            table2ItemSeleccionado = row._row.data.material_id; 
            $("#tabla-materiales-lower-label").html("SelecciÃ³n: " + table2ItemSeleccionado); 
        });
        
        table2.on("rowSelectionChanged", function(data, rows) {
            //document.getElementById("#tabla-materiales-lower-label").innerHTML = data.length;
            if (data.length === 0 ) {
                table2ItemSeleccionado = 0;
                $("#tabla-materiales-lower-label").html("SelecciÃ³n: " + table2ItemSeleccionado);
            }
        }); */

        /*
        // agrega Fila en table2 (materiales)
        $("#materiales-nuevo").click(function() { 
            // Tendrias que generar el nuevo Id en la DB, y cuardarlo en nuevoId
            const nuevoId = 0;
            table2.addRow( {material_id: nuevoId }, true);
        }); 
        
        // agrega Fila en table2 (materiales) 
        $("#usuarios-nuevo").click(function() { 
            // Tendrias que generar el nuevo Id en la DB, y cuardarlo en nuevoId 
            const nuevoId = 0;
            table.addRow( {material_id: nuevoId }, true);
        }); 

        */
        
        
        $("#pedidos-nuevo-producto").click(function() { 
            // Tendrias que generar el nuevo Id en la DB, y cuardarlo en nuevoId 
            const nuevoId = 0;
            tableProductosPedidos.addRow( {id_producto: nuevoId }, true);
        }); 



        // ------------------------------
        // General FE script
        // ------------------------------

/* 
        $("#pedidos-encabezados").attr("class", "row");
        $("#pedidos-lista").attr("class", "row d-none");
        $("#pedidos-form").attr("class", "row d-none");

        $("#btn-nuevo-pedido").click( function () {  
            //alert("nuevo pedido");
            $("#pedidos-lista").attr("class", "row d-none");
            $("#pedidos-encabezados").attr("class", "row d-none");
            $("#pedidos-form").attr("class", "row"); 
        });

        $("#btn-lista-pedidos").click( function () { 
            //alert("muestra la lista de pedidos");
            $("#pedidos-encabezados").attr("class", "row d-none");
            $("#pedidos-lista").attr("class", "row");
            $("#pedidos-form").attr("class", "row d-none");
        }); 
         */

        
        // btn enviar pedido (simula el submit) 
        /* 
        $("#btn-enviar-pedido").submit(function() { 
            alert("procedimiento para el envio de pedido"); 
        }); 
        */ 

        /* Valida si el form estÃ¡ completo */ 
        function validaFormulario(frm) { 
            let res;
            $('#' + frm)[0].checkValidity() ? res=true : res=false;
            return res;
        } 

        /* Subrutina para Llenar el select obj con los datos del array datosArr */ 
        function llenaSelect(idSelect, datosArr) { 
            
            $('#' + idSelect).find("option").remove().end().append('<option value="">Choose...</option>');
            datosArr.forEach((item, index) => { 
                $('#' + idSelect).append('<option>' + item + '</option>')  
            }); 
        } 
        
        /* Limpia los objetos de un form */ 
        function limpiaObjetosEnForm(frm) {
            // 'function' is needed here 
            $("#" + frm).find(":input").each(function () {  
                $(this).val("");
            });
        }

        /* Construye un objeto con los inputs de un form */ 
        function arrayObjetosEnForm(frm) {
            
            let valores = {};
            $("#" + frm).find(":input").each(function () {  /* 'function' is needed here */
                valores[this.name] = $(this).val();
            });
            return valores;
            /*Source: https://stackoverflow.com/questions/5603117/jquery-create-object-from-form-fields */
        }
        
        
        /* Recorre el form form-nuevo-pedido y crea el array de datos luego manda el post para agregar el nuevo registro*/
        function enviaNuevoPedido() {
            
            let valores = arrayObjetosEnForm("form-nuevo-pedido");
            delete valores.id_pedido;
            valores.id_usuario = 1;
            $.post("/pedidos/guardar/", valores, (res) => { 
                if( res > 0 ) { 
                    //console.log("Â¡Se guardÃ³ el registro! Con el id: " + res); 
                    let tblProdPedidosRows = {}; 
                    const rows = tableProductosPedidos.getRows(); 
                    const rowCount = tableProductosPedidos.getDataCount(); 
                    for (let i = 0; i<rowCount; i++) { 
                        tblProdPedidosRows[i] = rows[i]._row.data;
                        tblProdPedidosRows[i].id_pedido = parseInt(res);
                    }
                    /* agrega el nÃºmero de productos agregados */
                    tblProdPedidosRows['totalRows'] = rowCount;
                    /* aquÃ­ hacemos el post con los rows de la tabla de productos pedidos */
                    $.post("/pedidos/prodpedidos/", tblProdPedidosRows, (res2) => {
                        if (res2 === 'ok') {  /* definir bien la respuesta */
                            alert("Pedido y productos registrados con Ã©xito");
                            location.reload();
                        }
                    });                     
                } 
            }); 
        }

        /* Agrega un nuevo pedido (si esta completo el form) */ 
        $( "#form-nuevo-pedido" ).submit(function( event ) { 

            validaFormulario("form-nuevo-pedido") ? enviaNuevoPedido() : alert("Uno o mÃ¡s campos requeridos faltan de completar.");
            event.preventDefault();
        });

        /* Cuando se da clic en el btn hace la consulta y con el array res llena el select del modal (res es un array) */
        $("#btn-modal-agregar-productos").click(() => { 

            limpiaObjetosEnForm('frm-modal-productos-pedidos');
            $.get("/compras/listaprod", (res) => { 
                // el res es de la forma {{ id_producto: x1, nb_producto: a1}...{ id_producto: xn, nb_producto: a}}
                // PARA LLENAR UN SELECT
                // Llena el select con el id de producto y el nombre
                /* let idSelect = "modal-ppedidos-1";
                $('#' + idSelect).find("option").remove().end().append('<option value="">Choose...</option>');
                res.forEach((item, index) => { 
                    $('#' + idSelect).append('<option>' + item.id_producto + '-' + item.nb_producto + '</option>')  
                }); */

                // PARA HABILITAR EL AUTOCOMPLETE
                let arr_productos=[];
                res.forEach((item, index) => { 
                    arr_productos.push(item.nb_producto + '--' + item.id_producto);
                });
                autocomplete(document.getElementById("modal-ppedidos-1"), arr_productos);

            });
        });


        /* Modal - Pedidos - BotÃ³n Agregar */
        $("#modal-ppedidos-agregar").click(function() {
            // aplica el submit del boton
        });

        /* Modal - Pedidos - Calcula el Importe del pedido cuando el tipo de cambio pierde el foco */
        $("#modal-ppedidos-8").focusout(function() {
            // modal-ppedidos-2 * modal-ppedidos-3
            let cantidad = parseFloat($("#modal-ppedidos-2").val());
            let precio_unitario = parseFloat($("#modal-ppedidos-3").val());
            let tipo_de_cambio = parseFloat($("#modal-ppedidos-8").val());
            let importe = cantidad * precio_unitario * tipo_de_cambio; 
            $("#modal-ppedidos-4").val( Math.round(importe * 100) / 100 ) ;
            
        });

        /* Recorre el form frm-modal-productos-pedidos y crea el array de datos luego manda el post para agregar el nuevo producto */
        /* Modal - Pedidos - Agrega un nuevo producto */ 
        function agregaNuevoProductoEnTabla() {
            
            let valores = arrayObjetosEnForm("frm-modal-productos-pedidos");
            let idConProd = valores.nb_producto;
            let pos = idConProd.indexOf('--');
            let largo = idConProd.length;
            // los dos guiones apoyan para identificar el id al final del string
            valores.id_producto = idConProd.substring(pos+2, largo);
            valores.nb_producto = idConProd.substring(0, pos);
            tableProductosPedidos.addRow( valores, true);
            $("#modal-ppedidos-cancelar").click();

        }

        /* Modal - Pedidos - Agrega un nuevo producto */ 
        $( "#frm-modal-productos-pedidos" ).submit(function( event ) { 

            validaFormulario("frm-modal-productos-pedidos") ? agregaNuevoProductoEnTabla() : alert("Uno o mÃ¡s campos requeridos faltan de completar.");
            event.preventDefault();
        });


        /* VISTA - LISTA DE PEDIDOS */

        // Guarda el Id del registro seleccionado
        tableListaPedidos.on("rowSelected", function(row) { 

            let id_pedido_seleccionado = row._row.data.id_pedido;
            $("#id_pedido_seleccionado").html("Id seleccionado: " + id_pedido_seleccionado); 
            //alert("id seleccionado " +  id_pedido_seleccionado);
            //tableListaPedidos.deselectRow(row);
        });

        // Cuando cambia el select del form
        $( "#lista_pedidos_combo" ).change(function() { 
            let valores = {};
            valores['nb_estatus'] = $( "#lista_pedidos_combo option:selected" ).text();
            //alert( "Actualizamos el grid con " + seleccion );

            $.post("/listapedidosfiltrada", valores, (res) => {
                tableListaPedidos.replaceData(res);
            });

        });

        

        /* TERMINA VISTA - LISTA DE PEDIDOS */


        /* boton de prueba temporal */
        $("#btn-editar-pedido").click(function() {
            const rows = tableProductosPedidos.getRows();
            const rowCount = tableProductosPedidos.getDataCount();

            console.log( 'Rows: ' + rowCount);
            
            for(let i = 0; i<rowCount; i++) {
                console.log(rows[i]._row.data);
            }
            
        });

    </script>

    

    <!-- para el boton responsive del nav-var -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js" integrity="sha384-uO3SXW5IuS1ZpFPKugNNWqTZRRglnUJK6UAZ/gxOX80nxEkN9NcGZTftn6RzhGWE" crossorigin="anonymous"></script>



    
</body>
</html>
